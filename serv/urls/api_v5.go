package urls

import (
	"bytes"
	// "fmt"
	. "cm-v5/serv/module"
	"cm-v5/serv/module/artist"
	"cm-v5/serv/module/campaign"
	"cm-v5/serv/module/comment"
	"cm-v5/serv/module/config"
	"cm-v5/serv/module/content"
	"cm-v5/serv/module/drm_auth"
	"cm-v5/serv/module/feedback"
	"cm-v5/serv/module/geo"
	"cm-v5/serv/module/giftcode"
	"cm-v5/serv/module/kplus"
	"cm-v5/serv/module/live_event"
	"cm-v5/serv/module/live_event_finished"
	"cm-v5/serv/module/livetv_v3"
	"cm-v5/serv/module/local"
	"cm-v5/serv/module/menu"
	"cm-v5/serv/module/message"
	"cm-v5/serv/module/middleware"
	"cm-v5/serv/module/notfound"
	"cm-v5/serv/module/page"
	"cm-v5/serv/module/qnet"
	"cm-v5/serv/module/rating"
	"cm-v5/serv/module/recommendation"
	"cm-v5/serv/module/redirect"
	"cm-v5/serv/module/report"
	"cm-v5/serv/module/search"
	"cm-v5/serv/module/shp"
	"cm-v5/serv/module/tag"
	"cm-v5/serv/module/tracking"
	"cm-v5/serv/module/version_data"
	"cm-v5/serv/module/watchlater"
	"io/ioutil"
	"os"
	"time"

	"net/http"

	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"

	// swagger
	_ "cm-v5/docs" // docs is generated by Swag CLI, you have to import it.

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

type bodyLogWriter struct {
	gin.ResponseWriter
	body *bytes.Buffer
}

var (
	json = jsoniter.ConfigCompatibleWithStandardLibrary
)

func (w bodyLogWriter) Write(b []byte) (int, error) {
	w.body.Write(b)
	return w.ResponseWriter.Write(b)
}

func (w bodyLogWriter) WriteString(s string) (int, error) {
	w.body.WriteString(s)
	return w.ResponseWriter.WriteString(s)
}

func respondWithError(code int, message string, c *gin.Context) {
	resp := map[string]string{"error": message}
	c.JSON(code, resp)
	c.Abort()
}

func TokenAuthMiddlewareLock() gin.HandlerFunc {
	return func(c *gin.Context) {
		token := c.Request.Header.Get("Authorization")
		if token == "" {
			respondWithError(401, "API token required", c)
			return
		}
		jwt, err := LocalAuthVerify(token)

		//Check account banned
		Exits := CheckAccountBanned(jwt.Subject)
		if !Exits {
			respondWithError(403, "Blocked User", c)
			return
		}

		if err != nil {
			respondWithError(401, err.Error(), c)
			return
		}

		c.Set("device_id", jwt.DeviceId)
		c.Set("user_id", jwt.Subject)
		c.Set("user_is_premium", jwt.Ispremium)
		c.Next()
	}
}

func TokenAuthMiddlewareUnLock() gin.HandlerFunc {
	return func(c *gin.Context) {
		token := c.Request.Header.Get("Authorization")
		if token == "" {
			c.Next()
			return
		}

		jwt, err := LocalAuthVerify(token)
		if jwt.Subject != "" {
			Exits := CheckAccountBanned(jwt.Subject)
			if !Exits {
				respondWithError(403, "Blocked User", c)
				return
			}
		}

		if err != nil {
			c.Next()
			return
		}

		c.Set("device_id", jwt.DeviceId)
		c.Set("access_token", token)
		c.Set("user_id", jwt.Subject)
		c.Set("user_is_premium", jwt.Ispremium)
		c.Next()
	}
}

func LogRequestMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		t := time.Now()
		dataBodyRequest, _ := BodyReaderToString(c.Request)

		blw := &bodyLogWriter{body: bytes.NewBufferString(""), ResponseWriter: c.Writer}
		c.Writer = blw
		c.Next()

		// after request
		latency := time.Since(t)
		dataBodyResponse := blw.body.String()
		middleware.ProcessResponse(c, latency.Seconds(), dataBodyRequest, dataBodyResponse)
	}
}

func InitUrlsV3(router *gin.Engine) {
	router.Use(LogRequestMiddleware())
	ver3 := router.Group("/backend/cm/v5")
	{
		// Thu Add swagger file for API V3
		url := ginSwagger.URL("/backend/cm/v5/doc-v5") // The url pointing to API definition
		ver3.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

		ver3.GET("/doc-v5", func(c *gin.Context) {
			// Open our jsonFile
			jsonFile, err := os.Open("./docs/doc-v5.json")
			var result map[string]interface{}
			// if we os.Open returns an error then handle it
			if err == nil {
				// defer the closing of our jsonFile so that we can parse it later on
				defer jsonFile.Close()
				byteValue, _ := ioutil.ReadAll(jsonFile)
				json.Unmarshal([]byte(byteValue), &result)
			}
			c.JSON(http.StatusOK, FormatResultAPI(http.StatusOK, "", result))
		})

		ver3.GET("health-check", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"message": "pong",
			})
		})

		ver3.POST("log-errors", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"message": "ok",
			})
		})

		ver3.POST("/redirect", redirect.RedirectInit)

		ver3.POST("/get_views", content.GetViewsContents)
		ver3.GET("/check-version-dv", version_data.CheckVersionV4)
		ver3.GET("/version-dv", version_data.GetVersionV4)
		ver3.POST("/version-dv/set", version_data.SetVersionV4)
		ver3.POST("/check-drm/castlab", drm_auth.CheckAuthDrmCastlab)
		ver3.GET("/check-drm/vieon", drm_auth.CheckAuthDrmVieON)

		ver3.Use(TokenAuthMiddlewareUnLock())
		ver3.GET("/geo-check", geo.CheckGeoIp)
		ver3.POST("content/:content_id/comments", comment.GetCommentsByContentIdInit)
		ver3.GET("/get-config", config.GetConfigByKeyInit)

		//KHANH DT-11327
		ver3.GET("/shp/samsung", shp.SmartHubPreviewInit)
		ver3.GET("/not-found/vod", notfound.VodPreviewInit)
		ver3.GET("/not-found/livetv", notfound.LiveTVPreviewInit)

		//report type
		ver3.GET("/report_type", report.GetReportTypeInit)

		// Empty item
		ver3.GET("/ribbon/:ribbon_id", page.GetRibbonV3)
		ver3.GET("/home_ribbons", page.GetHomeRibbonsV3)
		ver3.GET("/home_banners", page.GetHomeBannersV3)
		ver3.GET("/page_ribbons/:page_id", page.GetPageRibbonsV3)
		ver3.GET("/page_banners/:page_id", page.GetPageBannersV3)
		ver3.POST("/slug/ribbon", page.GetSlugRibbonV3)
		ver3.POST("/slug/page_ribbons", page.GetSlugPageRibbonsV3)
		ver3.POST("/slug/page_banners", page.GetSlugPageBannersV3)

		ver3.GET("/menu", menu.GetListMenu)
		ver3.GET("/related/:content_id", content.GetRelatedById)
		ver3.POST("/slug/related", content.GetRelatedBySlug)
		ver3.GET("/related_videos/:group_id", content.GetRelatedVideosById)
		ver3.POST("/slug/related_videos", content.GetRelatedVideosBySlug)
		ver3.POST("/slug/tags/contents", tag.GetTagsBySlug)
		ver3.POST("/tags/contents", tag.GetTagsById)
		ver3.GET("/tags/category", tag.GetTagsCategory)
		ver3.GET("/artist/contents/:people_id", artist.GetContentArtistByID)
		ver3.POST("/slug/artist/contents", artist.GetContentArtistBySlug)
		ver3.GET("/artist/info/:people_id", artist.GetArtistID)
		ver3.POST("/slug/artist", artist.GetArtistBySlug)
		ver3.GET("/artist/related/:people_id", artist.GetArtistRelatedByID)
		ver3.POST("/slug/artist/related", artist.GetArtistRelatedBySlug)
		ver3.GET("/local_data", local.GetLocalInfo)
		ver3.GET("/version/data", version_data.GetVersionData)
		ver3.GET("/search", search.Search)
		ver3.GET("/search/suggest", search.SearchSuggest)
		ver3.GET("/search/search_keywords", search.GetSearchKeyword)
		ver3.POST("/tracking/event", recommendation.TrackingEvent)
		ver3.GET("/events", live_event.GetListEvent)
		ver3.GET("/events-finished", live_event_finished.GetListEventFinished)
		ver3.GET("/events/:event_id", live_event.GetListEventByID)
		ver3.POST("/slug/events", live_event.GetListEventBySlug)

		ver3.POST("/tracking-notification", tracking.TrackingNotification)

		ver3.GET("/content/:content_id/tips", content.GetContentTipById)
		ver3.POST("/tracking/watch", tracking.TrackingWatchByUser)
		ver3.GET("/content/:content_id", content.GetContentById)
		ver3.GET("/content_detail/:content_id", content.GetContentDetailById)
		ver3.POST("/slug/content", content.GetContentBySlug)
		ver3.GET("/episode/:content_id", content.GetEpisodeById)
		ver3.POST("/slug/episode", content.GetEpisodeBySlug)
		ver3.GET("/episode_range/:content_id", content.GetEpisodeRangeById)

		ver3.GET("/giftcode_detail/:code", giftcode.GiftCodeLG)

		//Khanh
		ver3.GET("/vod/:content_id", content.GetVodById)
		ver3.GET("/vod_detail/:content_id", content.GetVodDetailById)
		ver3.POST("/slug/vod", content.GetVodBySlug)

		//LiveTV V3
		ver3.GET("/livetv/category", livetv_v3.GetLiveTVCategory)
		ver3.GET("/livetv/list/:livetv_group_id", livetv_v3.GetLiveTVByGroup)
		ver3.GET("/livetv/epg", livetv_v3.GetLiveTVEPG)
		ver3.GET("/livetv/detail/:livetv_id", livetv_v3.GetDetailLiveTVByID)
		ver3.POST("/slug/livetv/detail", livetv_v3.GetDetailLiveTVBySlug)

		ver3.Use(TokenAuthMiddlewareLock())
		ver3.GET("/promotioncode_detail/:package_id/:code", giftcode.PromotionCodeDetail)

		ver3.GET("/watchlater", watchlater.GetWatchlaterByUser)
		ver3.POST("/watchlater", watchlater.AddWatchlaterByUser)
		ver3.GET("/watchmore", tracking.ListWatchingByUser)
		ver3.DELETE("/watchmore", tracking.RemoveWatchingByUser)
		ver3.GET("/message/count", message.CountMessageByUser)
		ver3.GET("/message", message.ListMessageByUser)
		ver3.POST("/message", message.ActionMessageByUser)
		ver3.GET("/search_histories", search.GetHistorySearch)
		ver3.POST("/search_histories", search.AddHistorySearch)
		ver3.DELETE("/search_histories", search.RemoveHistorySearch)
		ver3.POST("/rating/:content_id/:point", rating.ActionRatingByUser)

		ver3.POST("/giftcode/use", giftcode.Route_UseCode)
		ver3.POST("/push-token", message.SaveDataPushTokenByUser)

		ver3.POST("/content/:content_id/report", report.ReportContentInit)
		ver3.POST("content/:content_id/user-comment", comment.PostCommentInit)
		ver3.POST("content/:content_id/del-comment", comment.DelCommentByUser)

		//LIVETV V3
		ver3.GET("/livetv/favorite/list", livetv_v3.GetLivetvFavoriteByUser)
		ver3.POST("/livetv/favorite/add", livetv_v3.AddLivetvFavoriteByUser)
		ver3.GET("/livetv/watched/list", livetv_v3.GetLivetvWatchedByUser)
		ver3.POST("/livetv/watched/add", livetv_v3.AddLivetvWatchedByUser)

		ver3.GET("/qnet-token", qnet.GetTokenQNet)

		// Feedback
		ver3.GET("/feedback", feedback.Feedback_GetList)
		ver3.POST("/feedback-open", feedback.Feedback_Open)
		ver3.POST("/feedback-close", feedback.Feedback_Close)
		ver3.POST("/feedback-save", feedback.Feedback_Save)
		ver3.GET("/feedback-clear", feedback.Feedback_Clear)
		ver3.GET("/kplus/bannertype", kplus.GetTypeBannerKPlusInit)

		// Campaign
		ver3.GET("/campaign/samsung/3008-3011", campaign.Samsung_3008_3011)
	}
}
